#include "ColorSpaces.h"

namespace CIE1931 {
	const spSpectrumSampler X = std::make_shared<SpectrumSampler>(std::make_shared<GridFunction1D>(
		380.0f,
		780.0f,
		floatList{ 0.001368f, 0.002236f, 0.004243f, 0.00765f, 0.01431f, 0.02319f,
		0.04351f, 0.07763f, 0.13438f, 0.21477f, 0.2839f, 0.3285f, 0.34828f, 0.34806f, 0.3362f, 0.3187f,
		0.2908f, 0.2511f, 0.19536f, 0.1421f, 0.09564f, 0.05795f, 0.03201f, 0.0147f, 0.0049f, 0.0024f,
		0.0093f, 0.0291f, 0.06327f, 0.1096f, 0.1655f, 0.22575f, 0.2904f, 0.3597f, 0.43345f, 0.51205f,
		0.5945f, 0.6784f, 0.7621f, 0.8425f, 0.9163f, 0.9786f, 1.0263f, 1.0567f, 1.0622f, 1.0456f,
		1.0026f, 0.9384f, 0.85445f, 0.7514f, 0.6424f, 0.5419f, 0.4479f, 0.3608f, 0.2835f, 0.2187f,
		0.1649f, 0.1212f, 0.0874f, 0.0636f, 0.04677f, 0.0329f, 0.0227f, 0.01584f, 0.011359f, 0.008111f,
		0.00579f, 0.004109f, 0.002899f, 0.002049f, 0.00144f, 0.001f, 0.00069f, 0.000476f, 0.000332f, 0.000235f,
		0.000166f, 0.000117f, 0.000083f, 0.000059f, 0.000042f }));
	const spSpectrumSampler Y = std::make_shared<SpectrumSampler>(std::make_shared<GridFunction1D>(
		380.0f,
		780.0f,
		floatList{ 0.000039f, 0.000064f, 0.00012f, 0.000217f, 0.000396f, 0.00064f,
		0.00121f, 0.00218f, 0.004f, 0.0073f, 0.0116f, 0.01684f, 0.023f, 0.0298f, 0.038f, 0.048f, 0.06f,
		0.0739f, 0.09098f, 0.1126f, 0.13902f, 0.1693f, 0.20802f, 0.2586f, 0.323f, 0.4073f, 0.503f,
		0.6082f, 0.71f, 0.7932f, 0.862f, 0.91485f, 0.954f, 0.9803f, 0.99495f, 1.f, 0.995f, 0.9786f,
		0.952f, 0.9154f, 0.87f, 0.8163f, 0.757f, 0.6949f, 0.631f, 0.5668f, 0.503f, 0.4412f, 0.381f,
		0.321f, 0.265f, 0.217f, 0.175f, 0.1382f, 0.107f, 0.0816f, 0.061f, 0.04458f, 0.032f, 0.0232f,
		0.017f, 0.01192f, 0.00821f, 0.005723f, 0.004102f, 0.002929f, 0.002091f, 0.001484f, 0.001047f, 0.00074f,
		0.00052f, 0.000361f, 0.000249f, 0.000172f, 0.00012f, 0.000085f, 0.00006f, 0.000042f, 0.00003f,
		0.000021f, 0.000015f }));
	const spSpectrumSampler Z = std::make_shared<SpectrumSampler>(std::make_shared<GridFunction1D>(
		380.0f,
		780.0f,
		floatList{ 0.00645f, 0.01055f, 0.02005f, 0.03621f, 0.06785f,
		0.1102f, 0.2074f, 0.3713f, 0.6456f, 1.03905f, 1.3856f, 1.62296f, 1.74706f, 1.7826f, 1.77211f,
		1.7441f, 1.6692f, 1.5281f, 1.28764f, 1.0419f, 0.81295f, 0.6162f, 0.46518f, 0.3533f, 0.272f,
		0.2123f, 0.1582f, 0.1117f, 0.07825f, 0.05725f, 0.04216f, 0.02984f, 0.0203f, 0.0134f, 0.00875f,
		0.00575f, 0.0039f, 0.00275f, 0.0021f, 0.0018f, 0.00165f, 0.0014f, 0.0011f, 0.001f, 0.0008f,
		0.0006f, 0.00034f, 0.00024f, 0.00019f, 0.0001f, 0.00005f, 0.00003f, 0.00002f, 0.00001f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f }));

	const spSpectrumSampler R = std::make_shared<SpectrumSampler>(std::make_shared<GridFunction1D>(380.f, 780.f,
		floatList{ 3e-05f, 5e-05f, 0.0001f, 0.00017f, 0.0003f, 0.00047f, 0.00084f, 0.00139f, 0.00211f, 0.00266f,
		0.00218f, 0.00036f, -0.00261f, -0.00673f, -0.01213f, -0.01874f, -0.02608f, -0.03324f, -0.03933f, -0.04471f, -0.04939f, -0.05364f,
		-0.05814f, -0.06414f, -0.07137f, -0.0812f, -0.08901f, -0.09356f, -0.09264f, -0.08473f, -0.07101f, -0.05316f, -0.03152f, -0.00613f,
		0.02279f, 0.05514f, 0.0906f, 0.1284f, 0.16768f, 0.20715f, 0.24562f, 0.27989f, 0.30928f, 0.33184f, 0.34429f, 0.34756f, 0.33971f,
		0.32265f, 0.29708f, 0.26348f, 0.22677f, 0.19233f, 0.15968f, 0.12905f, 0.10167f, 0.07857f, 0.05932f, 0.04366f, 0.03149f, 0.02294f,
		0.01687f, 0.01187f, 0.00819f, 0.00572f, 0.0041f, 0.00291f, 0.0021f, 0.00148f, 0.00105f, 0.00074f, 0.00052f, 0.00036f, 0.00025f,
		0.00017f, 0.00012f, 8e-05f, 6e-05f, 4e-05f, 3e-05f, 1e-05f, 0.f }));
	const spSpectrumSampler G = std::make_shared<SpectrumSampler>(std::make_shared<GridFunction1D>(380.f, 780.f,
		floatList{ -1e-05f, -2e-05f, -4e-05f, -7e-05f, -0.00014f, -0.00022f, -0.00041f, -0.0007f, -0.0011f,
		-0.00143f, -0.00119f, -0.00021f, 0.00149f, 0.00379f, 0.00678f, 0.01046f, 0.01485f, 0.01977f, 0.02538f, 0.03183f, 0.03914f,
		0.04713f, 0.05689f, 0.06948f, 0.08536f, 0.10593f, 0.1286f, 0.15262f, 0.17468f, 0.19113f, 0.20317f, 0.21083f, 0.21466f, 0.21487f,
		0.21178f, 0.20588f, 0.19702f, 0.18522f, 0.17087f, 0.15429f, 0.1361f, 0.11686f, 0.09754f, 0.07909f, 0.06246f, 0.04776f, 0.03557f,
		0.02583f, 0.01828f, 0.01253f, 0.00833f, 0.00537f, 0.00334f, 0.00199f, 0.00116f, 0.00066f, 0.00037f, 0.00021f, 0.00011f, 6e-05f,
		3e-05f, 1e-05f, -5.29395592034e-23f, -3.63959469523e-23f, -4.13590306277e-24f, -4.54949336904e-24f, 4.13590306277e-25f,
		1.29246970711e-25f, 6.46234853557e-27f, -1.4540284205e-26f, -6.0584517521e-27f, 1.21169035042e-27f, -1.00974195868e-28f,
		1.26217744835e-28f, 1.57772181044e-29f, -3.15544362088e-30f, 7.88860905221e-31f, 0.f, -1.47911419729e-31f, 0.f, 0.f
		}));
	const spSpectrumSampler B = std::make_shared<SpectrumSampler>(std::make_shared<GridFunction1D>(380.f, 780.f,
		floatList{ 0.00117f, 0.00189f, 0.00359f, 0.00647f, 0.01214f, 0.01969f, 0.03707f, 0.06637f, 0.11541f,
		0.18575f, 0.24769f, 0.29012f, 0.31228f, 0.3186f, 0.3167f, 0.31166f, 0.29821f, 0.27295f, 0.22991f, 0.18592f, 0.14494f,
		0.10968f, 0.08257f, 0.06246f, 0.04776f, 0.03688f, 0.02698f, 0.01842f, 0.01221f, 0.0083f, 0.00549f, 0.0032f, 0.00146f,
		0.00023f, -0.00058f, -0.00105f, -0.0013f, -0.00138f, -0.00135f, -0.00123f, -0.00108f, -0.00093f, -0.00079f, -0.00063f,
		-0.00049f, -0.00038f, -0.0003f, -0.00022f, -0.00015f, -0.00011f, -8e-05f, -5e-05f, -3e-05f, -2e-05f, -1e-05f, -1e-05f,
		-6.61744490042e-22f, 0.f, -2.97785020519e-23f, -5.37667398159e-24f, 0.f, -7.75481824268e-25f, 0.f, 3.55429169456e-26f,
		3.23117426779e-27f, 5.65455496862e-27f, 4.03896783473e-28f, -7.57306469012e-29f, -1.57772181044e-29f, -2.36658271566e-30f,
		-1.38050658414e-30f, -8.87468518374e-31f, -2.46519032882e-32f, -1.23259516441e-32f, -2.46519032882e-32f, 0.f, -2.11852293883e-33f,
		-1.92592994439e-34f, 7.22223729145e-35f, -9.62964972194e-35f, 0.0f
		}));
}

namespace CIE1964 {
	const spSpectrumSampler X = std::make_shared<SpectrumSampler>(std::make_shared<GridFunction1D>(
		380.0f,
		780.0f,
		floatList{ 0.000160f, 0.000662f, 0.002362f, 0.007242f, 0.019110f,
		0.043400f, 0.084736f, 0.140638f, 0.204492f, 0.264737f, 0.314679f, 0.357719f, 0.383734f,
		0.386726f, 0.370702f, 0.342957f, 0.302273f, 0.254085f, 0.195618f, 0.132349f, 0.080507f,
		0.041072f, 0.016172f, 0.005132f, 0.003816f, 0.015444f, 0.037465f, 0.071358f, 0.117749f,
		0.172953f, 0.236491f, 0.304213f, 0.376772f, 0.451584f, 0.529826f, 0.616053f, 0.705224f,
		0.793832f, 0.878655f, 0.951162f, 1.014160f, 1.074300f, 1.118520f, 1.134300f, 1.123990f,
		1.089100f, 1.030480f, 0.950740f, 0.856297f, 0.754930f, 0.647467f, 0.535110f, 0.431567f,
		0.343690f, 0.268329f, 0.204300f, 0.152568f, 0.112210f, 0.081261f, 0.057930f, 0.040851f,
		0.028623f, 0.019941f, 0.013842f, 0.009577f, 0.006605f, 0.004553f, 0.003145f, 0.002175f,
		0.001506f, 0.001045f, 0.000727f, 0.000508f, 0.000356f, 0.000251f, 0.000178f, 0.000126f,
		0.000090f, 0.000065f, 0.000046f, 0.000033f }));
	const spSpectrumSampler Y = std::make_shared<SpectrumSampler>(std::make_shared<GridFunction1D>(
		380.0f,
		780.0f,
		floatList{ 0.000017f, 0.000072f, 0.000253f, 0.000769f, 0.002004f,
		0.004509f, 0.008756f, 0.014456f, 0.021391f, 0.029497f, 0.038676f, 0.049602f, 0.062077f,
		0.074704f, 0.089456f, 0.106256f, 0.128201f, 0.152761f, 0.185190f, 0.219940f, 0.253589f,
		0.297665f, 0.339133f, 0.395379f, 0.460777f, 0.531360f, 0.606741f, 0.685660f, 0.761757f,
		0.823330f, 0.875211f, 0.923810f, 0.961988f, 0.982200f, 0.991761f, 0.999110f, 0.997340f,
		0.982380f, 0.955552f, 0.915175f, 0.868934f, 0.825623f, 0.777405f, 0.720353f, 0.658341f,
		0.593878f, 0.527963f, 0.461834f, 0.398057f, 0.339554f, 0.283493f, 0.228254f, 0.179828f,
		0.140211f, 0.107633f, 0.081187f, 0.060281f, 0.044096f, 0.031800f, 0.022602f, 0.015905f,
		0.011130f, 0.007749f, 0.005375f, 0.003718f, 0.002565f, 0.001768f, 0.001222f, 0.000846f,
		0.000586f, 0.000407f, 0.000284f, 0.000199f, 0.000140f, 0.000098f, 0.000070f, 0.000050f,
		0.000036f, 0.000025f, 0.000018f, 0.000013f }));
	const spSpectrumSampler Z = std::make_shared<SpectrumSampler>(std::make_shared<GridFunction1D>(
		380.0f,
		555.0f,
		floatList{ 0.000705f, 0.002928f, 0.010482f, 0.032344f, 0.086011f,
		0.197120f, 0.389366f, 0.656760f, 0.972542f, 1.282500f, 1.553480f, 1.798500f, 1.967280f,
		2.027300f, 1.994800f, 1.900700f, 1.745370f, 1.554900f, 1.317560f, 1.030200f, 0.772125f,
		0.570060f, 0.415254f, 0.302356f, 0.218502f, 0.159249f, 0.112044f, 0.082248f, 0.060709f,
		0.043050f, 0.030451f, 0.020584f, 0.013676f, 0.007918f, 0.003988f, 0.001091f },
		BorderType::CLAMP_TO_BORDER, 0.0f));
}
namespace CIE2012 {
	const spSpectrumSampler X = std::make_shared<SpectrumSampler>(
		std::make_shared<GridFunction1D>(
			390.0f, 830.0f,
			floatList{
			3.769647E-03f,9.382967E-03f,2.214302E-02f,4.742986E-02f,8.953803E-02f,1.446214E-01f,2.035729E-01f,2.488523E-01f,2.918246E-01f,
			3.227087E-01f,3.482554E-01f,3.418483E-01f,3.224637E-01f,2.826646E-01f,2.485254E-01f,2.219781E-01f,1.806905E-01f,1.291920E-01f,
			8.182895E-02f,4.600865E-02f,2.083981E-02f,7.097731E-03f,2.461588E-03f,3.649178E-03f,1.556989E-02f,4.315171E-02f,7.962917E-02f,
			1.268468E-01f,1.818026E-01f,2.405015E-01f,3.098117E-01f,3.804244E-01f,4.494206E-01f,5.280233E-01f,6.133784E-01f,7.016774E-01f,
			7.967750E-01f,8.853376E-01f,9.638388E-01f,1.051011E+00f,1.109767E+00f,1.143620E+00f,1.151033E+00f,1.134757E+00f,1.083928E+00f,
			1.007344E+00f,9.142877E-01f,8.135565E-01f,6.924717E-01f,5.755410E-01f,4.731224E-01f,3.844986E-01f,2.997374E-01f,2.277792E-01f,
			1.707914E-01f,1.263808E-01f,9.224597E-02f,6.639960E-02f,4.710606E-02f,3.292138E-02f,2.262306E-02f,1.575417E-02f,1.096778E-02f,
			7.608750E-03f,5.214608E-03f,3.569452E-03f,2.464821E-03f,1.703876E-03f,1.186238E-03f,8.269535E-04f,5.758303E-04f,4.058303E-04f,
			2.856577E-04f,2.021853E-04f,1.438270E-04f,1.024685E-04f,7.347551E-05f,5.259870E-05f,3.806114E-05f,2.758222E-05f,2.004122E-05f,
			1.458792E-05f,1.068141E-05f,7.857521E-06f,5.768284E-06f,4.259166E-06f,3.167765E-06f,2.358723E-06f,1.762465E-06f }));
	const spSpectrumSampler Y = std::make_shared<SpectrumSampler>(std::make_shared<GridFunction1D>(
		390.0f, 830.0f,
		floatList{
		4.146161E-04f,1.059646E-03f,2.452194E-03f,4.971717E-03f,9.079860E-03f,1.429377E-02f,2.027369E-02f,2.612106E-02f,3.319038E-02f,
		4.157940E-02f,5.033657E-02f,5.743393E-02f,6.472352E-02f,7.238339E-02f,8.514816E-02f,1.060145E-01f,1.298957E-01f,1.535066E-01f,
		1.788048E-01f,2.064828E-01f,2.379160E-01f,2.850680E-01f,3.483536E-01f,4.277595E-01f,5.204972E-01f,6.206256E-01f,7.180890E-01f,
		7.946448E-01f,8.575799E-01f,9.071347E-01f,9.544675E-01f,9.814106E-01f,9.890228E-01f,9.994608E-01f,9.967737E-01f,9.902549E-01f,
		9.732611E-01f,9.424569E-01f,8.963613E-01f,8.587203E-01f,8.115868E-01f,7.544785E-01f,6.918553E-01f,6.270066E-01f,5.583746E-01f,
		4.895950E-01f,4.229897E-01f,3.609245E-01f,2.980865E-01f,2.416902E-01f,1.943124E-01f,1.547397E-01f,1.193120E-01f,8.979594E-02f,
		6.671045E-02f,4.899699E-02f,3.559982E-02f,2.554223E-02f,1.807939E-02f,1.261573E-02f,8.661284E-03f,6.027677E-03f,4.195941E-03f,
		2.910864E-03f,1.995557E-03f,1.367022E-03f,9.447269E-04f,6.537050E-04f,4.555970E-04f,3.179738E-04f,2.217445E-04f,1.565566E-04f,
		1.103928E-04f,7.827442E-05f,5.578862E-05f,3.981884E-05f,2.860175E-05f,2.051259E-05f,1.487243E-05f,1.080001E-05f,7.863920E-06f,
		5.736935E-06f,4.211597E-06f,3.106561E-06f,2.286786E-06f,1.693147E-06f,1.262556E-06f,9.422514E-07f,7.053860E-07f }));
	const spSpectrumSampler Z = std::make_shared<SpectrumSampler>(std::make_shared<GridFunction1D>(
		390.0f, 620.0f,
		floatList{
		0.01847260f,0.04609784f,0.1096090f,0.2369246f,0.4508369f,0.7378822f,1.051821f,1.305008f,1.552826f,1.748280f,1.917479f,1.918437f,
		1.848545f,1.664439f,1.522157f,1.428440f,1.250610f,9.991789E-01f,7.552379E-01f,5.617313E-01f,4.099313E-01f,3.105939E-01f,2.376753E-01f,
		1.720018E-01f,1.176796E-01f,8.283548E-02f,5.650407E-02f,3.751912E-02f,2.438164E-02f,1.566174E-02f,9.846470E-03f,6.131421E-03f,
		3.790291E-03f,2.327186E-03f,1.432128E-03f,8.822531E-04f,5.452416E-04f,3.386739E-04f,2.117772E-04f,1.335031E-04f,8.494468E-05f,
		5.460706E-05f,3.549661E-05f,2.334738E-05f,1.554631E-05f,1.048387E-05f, 0.0f }));
}

vec3 gamma(const vec3& color, float power) {
	return glm::pow(color, vec3(power));
}

namespace sRGB {
	const vec3 XYZPrimaryR(0.64f, 0.33f, 0.03f);
	const vec3 XYZPrimaryG(0.3f, 0.6f, 0.1f);
	const vec3 XYZPrimaryB(0.15f, 0.06f, 0.79f);
	const vec3 XYZWhitePoint(0.95047f, 1.f, 1.08883f);
	const mat3 fromXYZ1931(
		3.2404542f, -0.9692660f, 0.0556434f,
		-1.5371385f, 1.8760108f, -0.2040259f,
		-0.4985314f, 0.0415560f, 1.0572252f);
	const mat3 toXYZ1931(
		0.4124564f, 0.2126729f, 0.0193339f,
		0.3575761f, 0.7151522f, 0.1191920f,
		0.1804375f, 0.0721750f, 0.9503041f);
	vec3 fromLinear(const vec3& color) {
		vec3 srgb = color;
		const float a = 1.055f;
		const float b = -0.055f;
		const float c = 12.92f;
		const float d = 0.0031308f;
		const float gamma = 1.0f / 2.4;
		for (int i = 0; i < 3; ++i) {
			float absValue = glm::abs(srgb[i]);
			absValue = absValue < d ? absValue * c : a * glm::pow(absValue, gamma) + b;
			srgb[i] = glm::sign(srgb[i]) * absValue;
		}
		return srgb;
	}
	vec3 toLinear(const vec3& color) {
		vec3 srgb = color;
		const float a = 1.055f;
		const float b = 0.055f;
		const float c = 12.92f;
		const float d = 0.04045f;
		const float gamma = 2.4f;
		for (int i = 0; i < 3; ++i) {
			float absValue = glm::abs(srgb[i]);
			absValue = absValue < d ? absValue / c : glm::pow((absValue + b) / a, gamma);
			srgb[i] = glm::sign(srgb[i]) * absValue;
		}
		return srgb;
	}
}

namespace CIERGB {
	const vec3 XYZPrimaryR(0.488717f, 0.176204f, 0.0f);
	const vec3 XYZPrimaryG(0.310680f, 0.812985f, 0.010205f);
	const vec3 XYZPrimaryB(0.200604f, 0.010811f, 0.989807f);
	const vec3 XYZWhitePoint(1.f);
	const mat3 fromXYZ1931(
		2.3706743f, -0.5138850f, 0.0052982f,
		-0.9000405f, 1.4253036f, -0.0146949f,
		-0.4706338f, 0.0885814f, 1.0093968f
	);
	const mat3 toXYZ1931(
		0.4887180f, 0.1762044f, 0.0000000f,
		0.3106803f, 0.8129847f, 0.0102048f,
		0.2006017f, 0.0108109f, 0.9897952f
	);
	vec3 fromLinear(const vec3& color) {
		return gamma(color, 1.0f / 2.2f);
	}
	vec3 toLinear(const vec3& color) {
		return gamma(color, 2.2f);
	}
}

namespace CIELAB {
	float f(float x) {
		constexpr float sigma = 6.f / 29.f;
		constexpr float sigmaSqr = 36.f / 841.f;
		constexpr float sigmaCube = 216.f / 24389.f;
		return x > sigmaCube ? std::pow(x, 1.f / 3.f) : x / (3.f * sigmaSqr) + 4.f / 29.f;
	}
	float fInv(float x) {
		constexpr float sigma = 6.f / 29.f;
		constexpr float sigmaSqr = 36.f / 841.f;
		return x > sigma ? std::pow(x, 3.f) : 3.f * sigmaSqr * (x - 4.f / 29.f);
	}
	const vec3 fromXYZ(const vec3& color, const vec3& whitePoint) {
		vec3 fVec(f(color.x / whitePoint.x), f(color.y / whitePoint.y), f(color.z / whitePoint.z));
		float L = 116.f * fVec.y - 16.f;
		float a = 500.f * (fVec.x - fVec.y);
		float b = 200.f * (fVec.y - fVec.z);
		return vec3(L, a, b);
	}
	const vec3 toXYZ(const vec3& color, const vec3& whitePoint) {
		float x = whitePoint.x * fInv((color.x + 16.f) / 116.f + color.y / 500.f);
		float y = whitePoint.y * fInv((color.x + 16.f) / 116.f);
		float z = whitePoint.z * fInv((color.x + 16.f) / 116.f - color.z / 200.f);
		return vec3(x, y, z);
	}
}
